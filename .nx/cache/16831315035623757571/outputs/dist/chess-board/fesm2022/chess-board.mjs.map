{"version":3,"file":"chess-board.mjs","sources":["../../../projects/chess-board/src/lib/services/chess-board-canvas.service.ts","../../../projects/chess-board/src/lib/types/chess-board-theme.types.ts","../../../projects/chess-board/src/lib/services/configuration/chess-board-config.service.ts","../../../projects/chess-board/src/lib/services/draw/draw-chess-board.service.ts","../../../projects/chess-board/src/lib/services/manager/initialize-view.service.ts","../../../projects/chess-board/src/lib/container/chess-board/chess-board.component.ts","../../../projects/chess-board/src/lib/container/chess-board/chess-board.component.html","../../../projects/chess-board/src/chess-board.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ChessBoardCanvasService {\n  private _context: CanvasRenderingContext2D;\n  private _canvas: HTMLCanvasElement;\n\n  public get context(): CanvasRenderingContext2D {\n    return this._context;\n  }\n\n  public get canvas(): HTMLCanvasElement {\n    return this._canvas;\n  }\n\n  public get width(): number {\n    return this.canvas.width;\n  }\n\n  public get height(): number {\n    return this.canvas.height;\n  }\n\n  public setUpCanvas(canvas: HTMLCanvasElement): void {\n    const context = canvas.getContext('2d');\n\n    this._canvas = canvas;\n\n    if (context) {\n      this._context = context;\n    }\n  }\n\n  public clearCanvas(): void {\n    this.context.clearRect(0, 0, this.width, this.height);\n  }\n}\n","export interface ChessBoardTheme {\n  lightSquareColor: string;\n  darkSquareColor: string;\n}\n\nexport enum ChessBoardThemes {\n  classic = 'classic',\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ChessBoardTheme,\n  ChessBoardThemes,\n} from '../../types/chess-board-theme.types';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable()\nexport class ChessBoardConfigService {\n  public currentTheme: Observable<ChessBoardTheme>;\n  public isWhiteOnBottom = true;\n  public verticalCoordinates = ['1', '2', '3', '4', '5', '6', '7', '8'];\n  public horizontalCoordinates = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n\n  private _themes: Record<ChessBoardThemes, ChessBoardTheme> = {\n    [ChessBoardThemes.classic]: {\n      lightSquareColor: 'rgb(237, 238, 209)',\n      darkSquareColor: 'rgb(119, 152, 83)',\n    },\n  };\n\n  private _currentTheme = new BehaviorSubject(this._themes.classic);\n\n  constructor() {\n    this.currentTheme = this._currentTheme.asObservable();\n  }\n\n  public get currentThemeValue(): ChessBoardTheme {\n    return this._currentTheme.getValue();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ChessBoardCanvasService } from '../chess-board-canvas.service';\nimport { ChessBoardConfigService } from '../configuration/chess-board-config.service';\nimport {\n  BoardCoordinates,\n  BoardCoordinatesIndex,\n  CoordinatesDrawConfig,\n} from '../../types/board.types';\n\n@Injectable()\nexport class DrawChessBoardService {\n  private verticalCoordinates: string[];\n  private horizontalCoordinates: string[];\n\n  constructor(\n    private chessBoardCanvas: ChessBoardCanvasService,\n    private chessBoardConfig: ChessBoardConfigService,\n  ) {}\n\n  public execute(): void {\n    this.verticalCoordinates = this.getCoordinatesOrder('vertical');\n    this.horizontalCoordinates = this.getCoordinatesOrder('horizontal');\n\n    this.verticalCoordinates.forEach((vertical, index) => {\n      this.horizontalCoordinates.forEach((horizontal, horizontalIndex) => {\n        this.drawSquare({ vertical, horizontal });\n        this.drawCoordinates({ vertical, horizontal });\n      });\n    });\n  }\n\n  private drawSquare({ vertical, horizontal }: BoardCoordinates): void {\n    const chessBoardTheme = this.chessBoardConfig.currentThemeValue;\n    const coordinatesIndex = this.getCoordinatesIndex({ vertical, horizontal });\n    const squareColor = this.isDarkSquare(coordinatesIndex.sum)\n      ? chessBoardTheme.lightSquareColor\n      : chessBoardTheme.darkSquareColor;\n    const context = this.chessBoardCanvas.context;\n    const width = this.chessBoardCanvas.width;\n    const squareSize = width / 8;\n\n    context.fillStyle = squareColor;\n    context.textBaseline = 'top';\n    context.fillRect(\n      coordinatesIndex.horizontal * squareSize,\n      coordinatesIndex.vertical * squareSize,\n      squareSize,\n      squareSize,\n    );\n  }\n\n  private isDarkSquare(squareNumber: number): boolean {\n    return squareNumber % 2 === 0;\n  }\n\n  private drawCoordinates({ vertical, horizontal }: BoardCoordinates): void {\n    const coordinatesIndex = this.getCoordinatesIndex({ vertical, horizontal });\n    const isFirstColumn = coordinatesIndex.horizontal === 0;\n    const isLastRow = coordinatesIndex.vertical === 7;\n\n    if (isFirstColumn)\n      this.drawBoardCoordinates(\n        vertical,\n        coordinatesIndex,\n        this.getVerticalCoordinateDrawConfig,\n      );\n    if (isLastRow)\n      this.drawBoardCoordinates(\n        horizontal,\n        coordinatesIndex,\n        this.getHorizontalCoordinateDrawConfig,\n      );\n  }\n\n  private drawBoardCoordinates(\n    coordinate: string,\n    coordinatesIndex: BoardCoordinatesIndex,\n    callbackFunction: (\n      coordinatesIndex: BoardCoordinatesIndex,\n    ) => CoordinatesDrawConfig,\n  ): void {\n    const { textBaseline, textAlign, startPointX, startPointY } =\n      callbackFunction(coordinatesIndex);\n    const chessBoardTheme = this.chessBoardConfig.currentThemeValue;\n    const context = this.chessBoardCanvas.context;\n    const width = this.chessBoardCanvas.width;\n\n    const coordinateColor = !this.isDarkSquare(coordinatesIndex.sum)\n      ? chessBoardTheme.lightSquareColor\n      : chessBoardTheme.darkSquareColor;\n    const squareSize = width / 8;\n    const fontSize = squareSize / 4.5;\n\n    context.font = `bold ${fontSize}px Arial`;\n    context.fillStyle = coordinateColor;\n    context.textBaseline = textBaseline;\n    context.textAlign = textAlign;\n    context.fillText(coordinate, startPointX, startPointY);\n  }\n\n  private getVerticalCoordinateDrawConfig: (\n    coordinatesIndex: BoardCoordinatesIndex,\n  ) => CoordinatesDrawConfig = (coordinatesIndex: BoardCoordinatesIndex) => {\n    const width = this.chessBoardCanvas.width;\n    const squareSize = width / 8;\n\n    return {\n      textBaseline: 'top',\n      textAlign: 'left',\n      startPointX: coordinatesIndex.horizontal * squareSize + squareSize / 16,\n      startPointY: coordinatesIndex.vertical * squareSize + squareSize / 16,\n    };\n  };\n\n  private getHorizontalCoordinateDrawConfig: (\n    coordinatesIndex: BoardCoordinatesIndex,\n  ) => CoordinatesDrawConfig = (coordinatesIndex: BoardCoordinatesIndex) => {\n    const width = this.chessBoardCanvas.width;\n    const squareSize = width / 8;\n\n    return {\n      textBaseline: 'alphabetic',\n      textAlign: 'right',\n      startPointX:\n        coordinatesIndex.horizontal * squareSize + squareSize - squareSize / 16,\n      startPointY:\n        coordinatesIndex.vertical * squareSize + squareSize - squareSize / 16,\n    };\n  };\n\n  private getCoordinatesIndex({\n    vertical,\n    horizontal,\n  }: BoardCoordinates): BoardCoordinatesIndex {\n    const verticalIndex = this.verticalCoordinates.indexOf(vertical);\n    const horizontalIndex = this.horizontalCoordinates.indexOf(horizontal);\n    const sum = verticalIndex + horizontalIndex;\n\n    return {\n      vertical: verticalIndex,\n      horizontal: horizontalIndex,\n      sum,\n    };\n  }\n\n  private getCoordinatesOrder(type: 'horizontal' | 'vertical'): string[] {\n    if (type === 'horizontal')\n      return !this.chessBoardConfig.isWhiteOnBottom\n        ? [...this.chessBoardConfig.horizontalCoordinates].reverse()\n        : [...this.chessBoardConfig.horizontalCoordinates];\n\n    return this.chessBoardConfig.isWhiteOnBottom\n      ? [...this.chessBoardConfig.verticalCoordinates].reverse()\n      : [...this.chessBoardConfig.verticalCoordinates];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ChessBoardCanvasService } from '../chess-board-canvas.service';\nimport { DrawChessBoardService } from '../draw/draw-chess-board.service';\n\n@Injectable()\nexport class InitializeCanvasViewService {\n  constructor(\n    private chessBoardCanvas: ChessBoardCanvasService,\n    private drawChessBoard: DrawChessBoardService,\n  ) {}\n\n  public execute(canvas: HTMLCanvasElement): void {\n    this.chessBoardCanvas.setUpCanvas(canvas);\n    this.chessBoardCanvas.clearCanvas();\n    this.drawChessBoard.execute();\n  }\n}\n","import { Component } from '@angular/core';\nimport { ChessBoardCanvasService } from '../../services/chess-board-canvas.service';\nimport { InitializeCanvasViewService } from '../../services/manager/initialize-view.service';\nimport { DrawChessBoardService } from '../../services/draw/draw-chess-board.service';\nimport { ChessBoardConfigService } from '../../services/configuration/chess-board-config.service';\n\n@Component({\n  selector: 'ca-chess-board',\n  standalone: true,\n  imports: [],\n  templateUrl: './chess-board.component.html',\n  styleUrl: './chess-board.component.scss',\n  providers: [\n    ChessBoardCanvasService,\n    InitializeCanvasViewService,\n    DrawChessBoardService,\n    ChessBoardConfigService,\n  ],\n})\nexport class ChessBoardComponent {\n  constructor(private initializeCanvasView: InitializeCanvasViewService) {}\n\n  public ngAfterViewInit(): void {\n    const canvas = <HTMLCanvasElement>(\n      document.getElementById('chess-board-canvas')\n    );\n    this.initializeCanvasView.execute(canvas);\n  }\n}\n","<div class=\"canvas-container\">\n  <canvas id=\"chess-board-canvas\" width=\"600\" height=\"600\"></canvas>\n</div>\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.ChessBoardCanvasService","i2.ChessBoardConfigService","i2.DrawChessBoardService","i1.InitializeCanvasViewService"],"mappings":";;;;MAGa,uBAAuB,CAAA;AAIlC,IAAA,IAAW,OAAO,GAAA;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;AAED,IAAA,IAAW,MAAM,GAAA;QACf,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;AAED,IAAA,IAAW,KAAK,GAAA;AACd,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;KAC1B;AAED,IAAA,IAAW,MAAM,GAAA;AACf,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;KAC3B;AAEM,IAAA,WAAW,CAAC,MAAyB,EAAA;QAC1C,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAExC,QAAA,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;AAEtB,QAAA,IAAI,OAAO,EAAE;AACX,YAAA,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;AACzB,SAAA;KACF;IAEM,WAAW,GAAA;AAChB,QAAA,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KACvD;8GAhCU,uBAAuB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA,EAAA;kHAAvB,uBAAuB,EAAA,CAAA,CAAA,EAAA;;2FAAvB,uBAAuB,EAAA,UAAA,EAAA,CAAA;kBADnC,UAAU;;;ACGX,IAAY,gBAEX,CAAA;AAFD,CAAA,UAAY,gBAAgB,EAAA;AAC1B,IAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACrB,CAAC,EAFW,gBAAgB,KAAhB,gBAAgB,GAE3B,EAAA,CAAA,CAAA;;MCCY,uBAAuB,CAAA;AAelC,IAAA,WAAA,GAAA;QAbO,IAAe,CAAA,eAAA,GAAG,IAAI,CAAC;AACvB,QAAA,IAAA,CAAA,mBAAmB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAC/D,QAAA,IAAA,CAAA,qBAAqB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAEhE,QAAA,IAAA,CAAA,OAAO,GAA8C;AAC3D,YAAA,CAAC,gBAAgB,CAAC,OAAO,GAAG;AAC1B,gBAAA,gBAAgB,EAAE,oBAAoB;AACtC,gBAAA,eAAe,EAAE,mBAAmB;AACrC,aAAA;SACF,CAAC;QAEM,IAAa,CAAA,aAAA,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAGhE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;KACvD;AAED,IAAA,IAAW,iBAAiB,GAAA;AAC1B,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;KACtC;8GArBU,uBAAuB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA,EAAA;kHAAvB,uBAAuB,EAAA,CAAA,CAAA,EAAA;;2FAAvB,uBAAuB,EAAA,UAAA,EAAA,CAAA;kBADnC,UAAU;;;MCGE,qBAAqB,CAAA;IAIhC,WACU,CAAA,gBAAyC,EACzC,gBAAyC,EAAA;QADzC,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAyB;QACzC,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAyB;AAoF3C,QAAA,IAAA,CAAA,+BAA+B,GAEV,CAAC,gBAAuC,KAAI;AACvE,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;AAC1C,YAAA,MAAM,UAAU,GAAG,KAAK,GAAG,CAAC,CAAC;YAE7B,OAAO;AACL,gBAAA,YAAY,EAAE,KAAK;AACnB,gBAAA,SAAS,EAAE,MAAM;gBACjB,WAAW,EAAE,gBAAgB,CAAC,UAAU,GAAG,UAAU,GAAG,UAAU,GAAG,EAAE;gBACvE,WAAW,EAAE,gBAAgB,CAAC,QAAQ,GAAG,UAAU,GAAG,UAAU,GAAG,EAAE;aACtE,CAAC;AACJ,SAAC,CAAC;AAEM,QAAA,IAAA,CAAA,iCAAiC,GAEZ,CAAC,gBAAuC,KAAI;AACvE,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;AAC1C,YAAA,MAAM,UAAU,GAAG,KAAK,GAAG,CAAC,CAAC;YAE7B,OAAO;AACL,gBAAA,YAAY,EAAE,YAAY;AAC1B,gBAAA,SAAS,EAAE,OAAO;gBAClB,WAAW,EACT,gBAAgB,CAAC,UAAU,GAAG,UAAU,GAAG,UAAU,GAAG,UAAU,GAAG,EAAE;gBACzE,WAAW,EACT,gBAAgB,CAAC,QAAQ,GAAG,UAAU,GAAG,UAAU,GAAG,UAAU,GAAG,EAAE;aACxE,CAAC;AACJ,SAAC,CAAC;KA/GE;IAEG,OAAO,GAAA;QACZ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QAChE,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;QAEpE,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,KAAK,KAAI;YACnD,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,eAAe,KAAI;gBACjE,IAAI,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;gBAC1C,IAAI,CAAC,eAAe,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;AACjD,aAAC,CAAC,CAAC;AACL,SAAC,CAAC,CAAC;KACJ;AAEO,IAAA,UAAU,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAoB,EAAA;AAC3D,QAAA,MAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC;AAChE,QAAA,MAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;QAC5E,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC;cACvD,eAAe,CAAC,gBAAgB;AAClC,cAAE,eAAe,CAAC,eAAe,CAAC;AACpC,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;AAC9C,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;AAC1C,QAAA,MAAM,UAAU,GAAG,KAAK,GAAG,CAAC,CAAC;AAE7B,QAAA,OAAO,CAAC,SAAS,GAAG,WAAW,CAAC;AAChC,QAAA,OAAO,CAAC,YAAY,GAAG,KAAK,CAAC;AAC7B,QAAA,OAAO,CAAC,QAAQ,CACd,gBAAgB,CAAC,UAAU,GAAG,UAAU,EACxC,gBAAgB,CAAC,QAAQ,GAAG,UAAU,EACtC,UAAU,EACV,UAAU,CACX,CAAC;KACH;AAEO,IAAA,YAAY,CAAC,YAAoB,EAAA;AACvC,QAAA,OAAO,YAAY,GAAG,CAAC,KAAK,CAAC,CAAC;KAC/B;AAEO,IAAA,eAAe,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAoB,EAAA;AAChE,QAAA,MAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;AAC5E,QAAA,MAAM,aAAa,GAAG,gBAAgB,CAAC,UAAU,KAAK,CAAC,CAAC;AACxD,QAAA,MAAM,SAAS,GAAG,gBAAgB,CAAC,QAAQ,KAAK,CAAC,CAAC;AAElD,QAAA,IAAI,aAAa;YACf,IAAI,CAAC,oBAAoB,CACvB,QAAQ,EACR,gBAAgB,EAChB,IAAI,CAAC,+BAA+B,CACrC,CAAC;AACJ,QAAA,IAAI,SAAS;YACX,IAAI,CAAC,oBAAoB,CACvB,UAAU,EACV,gBAAgB,EAChB,IAAI,CAAC,iCAAiC,CACvC,CAAC;KACL;AAEO,IAAA,oBAAoB,CAC1B,UAAkB,EAClB,gBAAuC,EACvC,gBAE0B,EAAA;AAE1B,QAAA,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,GACzD,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;AACrC,QAAA,MAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC;AAChE,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;AAC9C,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;QAE1C,MAAM,eAAe,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC;cAC5D,eAAe,CAAC,gBAAgB;AAClC,cAAE,eAAe,CAAC,eAAe,CAAC;AACpC,QAAA,MAAM,UAAU,GAAG,KAAK,GAAG,CAAC,CAAC;AAC7B,QAAA,MAAM,QAAQ,GAAG,UAAU,GAAG,GAAG,CAAC;AAElC,QAAA,OAAO,CAAC,IAAI,GAAG,CAAQ,KAAA,EAAA,QAAQ,UAAU,CAAC;AAC1C,QAAA,OAAO,CAAC,SAAS,GAAG,eAAe,CAAC;AACpC,QAAA,OAAO,CAAC,YAAY,GAAG,YAAY,CAAC;AACpC,QAAA,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;QAC9B,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;KACxD;AAgCO,IAAA,mBAAmB,CAAC,EAC1B,QAAQ,EACR,UAAU,GACO,EAAA;QACjB,MAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACjE,MAAM,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AACvE,QAAA,MAAM,GAAG,GAAG,aAAa,GAAG,eAAe,CAAC;QAE5C,OAAO;AACL,YAAA,QAAQ,EAAE,aAAa;AACvB,YAAA,UAAU,EAAE,eAAe;YAC3B,GAAG;SACJ,CAAC;KACH;AAEO,IAAA,mBAAmB,CAAC,IAA+B,EAAA;QACzD,IAAI,IAAI,KAAK,YAAY;AACvB,YAAA,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,eAAe;kBACzC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC,OAAO,EAAE;kBAC1D,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC;AAEvD,QAAA,OAAO,IAAI,CAAC,gBAAgB,CAAC,eAAe;cACxC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,OAAO,EAAE;cACxD,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC;KACpD;8GAhJU,qBAAqB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAA,uBAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,uBAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA,EAAA;kHAArB,qBAAqB,EAAA,CAAA,CAAA,EAAA;;2FAArB,qBAAqB,EAAA,UAAA,EAAA,CAAA;kBADjC,UAAU;;;MCJE,2BAA2B,CAAA;IACtC,WACU,CAAA,gBAAyC,EACzC,cAAqC,EAAA;QADrC,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAyB;QACzC,IAAc,CAAA,cAAA,GAAd,cAAc,CAAuB;KAC3C;AAEG,IAAA,OAAO,CAAC,MAAyB,EAAA;AACtC,QAAA,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AAC1C,QAAA,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;AACpC,QAAA,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;KAC/B;8GAVU,2BAA2B,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAD,uBAAA,EAAA,EAAA,EAAA,KAAA,EAAAE,qBAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA,EAAA;kHAA3B,2BAA2B,EAAA,CAAA,CAAA,EAAA;;2FAA3B,2BAA2B,EAAA,UAAA,EAAA,CAAA;kBADvC,UAAU;;;MCeE,mBAAmB,CAAA;AAC9B,IAAA,WAAA,CAAoB,oBAAiD,EAAA;QAAjD,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAA6B;KAAI;IAElE,eAAe,GAAA;QACpB,MAAM,MAAM,IACV,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAC9C,CAAC;AACF,QAAA,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KAC3C;8GARU,mBAAmB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAC,2BAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA,EAAA;AAAnB,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,mBAAmB,EAPnB,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,SAAA,EAAA;YACT,uBAAuB;YACvB,2BAA2B;YAC3B,qBAAqB;YACrB,uBAAuB;AACxB,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,ECjBH,wHAGA,EAAA,MAAA,EAAA,CAAA,6FAAA,CAAA,EAAA,CAAA,CAAA,EAAA;;2FDgBa,mBAAmB,EAAA,UAAA,EAAA,CAAA;kBAb/B,SAAS;AACE,YAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,gBAAgB,EACd,UAAA,EAAA,IAAI,EACP,OAAA,EAAA,EAAE,EAGA,SAAA,EAAA;wBACT,uBAAuB;wBACvB,2BAA2B;wBAC3B,qBAAqB;wBACrB,uBAAuB;AACxB,qBAAA,EAAA,QAAA,EAAA,wHAAA,EAAA,MAAA,EAAA,CAAA,6FAAA,CAAA,EAAA,CAAA;;;AEjBH;;AAEG;;;;"}